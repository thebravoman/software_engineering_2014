diff --git a/spec/models/video_spec.rb b/spec/models/video_spec.rb
index 84b087f..434418e 100644
--- a/spec/models/video_spec.rb
+++ b/spec/models/video_spec.rb
@@ -1,46 +1,67 @@
 require 'spec_helper'
 require 'yt/models/video'
 
-describe Yt::Video do
-  subject(:video) { Yt::Video.new attrs }
+rating = nil
 
-  describe '#snippet' do
-    context 'given fetching a video returns a snippet' do
-      let(:attrs) { {snippet: {"title"=>"Fullscreen Creator Platform"}} }
-      it { expect(video.snippet).to be_a Yt::Snippet }
-    end
-  end
+describe Yt::Video do	
+	subject(:video) { Yt::Video.new attrs }
+  
+	describe '#snippet' do
+		context 'given fetching a video returns a snippet' do
+			let(:attrs) { {snippet: {"title"=>"Fullscreen Creator Platform"}} }
+			it { expect(video.snippet).to be_a Yt::Snippet }
+		end
+	end
 
-  describe '#statistics_set' do
-    context 'given fetching a video returns statistics' do
-      let(:attrs) { {statistics: {"viewCount"=>"202"}} }
-      it { expect(video.statistics_set).to be_a Yt::StatisticsSet }
-    end
-  end
+	describe '#liked?' do
+			let(:attrs) { {id: 'video-id'} }
+			it "liked?" do
+			likes  = nil
+			LIKES = :like
+			allow(likes).to receive(:likes).and_return(:like)
+			allow(video).to receive(:rating).and_return(likes)
+			allow(likes).to receive(:set).and_return(LIKES)
+			allow(likes).to receive(:rating).and_return(LIKES)
+			expect(video.like).to be true
+		end
+	end
+	describe '#disliked?' do
+		let(:attrs) { {id: 'video-id'} }
+		it "disliked?" do
+			dislikes  = nil
+			DISLIKES = :dislike
+			allow(dislikes).to receive(:likes).and_return(:like)
+			allow(video).to receive(:rating).and_return(dislikes)
+			allow(dislikes).to receive(:set).and_return(DISLIKES)
+			allow(dislikes).to receive(:rating).and_return(DISLIKES)
+			expect(video.dislike).to be true
+		end
+	end
+	describe '#update' do
+		let(:attrs) { {id: 'XUhVCoTsBaM', snippet: {'title'=>'old'}} }
+		before { expect(video).to receive(:do_update).and_yield 'snippet'=>{'title'=>'new'} }
+		it { expect(video.update title: 'new').to be true }
+		it { expect{video.update title: 'new'}.to change{video.title} }
+	end
 
-  describe '#content_details' do
-    context 'given fetching a video returns content details' do
-      let(:attrs) { {content_details: {"definition"=>"hd"}} }
-      it { expect(video.content_detail).to be_a Yt::ContentDetail }
-    end
-  end
-
-  describe '#update' do
-    let(:attrs) { {id: 'MESycYJytkU', snippet: {'title'=>'old'}} }
-    before { expect(video).to receive(:do_update).and_yield 'snippet'=>{'title'=>'new'} }
-
-    it { expect(video.update title: 'new').to be true }
-    it { expect{video.update title: 'new'}.to change{video.title} }
-  end
-
-  describe '#delete' do
-    let(:attrs) { {id: 'video-id'} }
-
-    context 'given an existing video' do
-      before { expect(video).to receive(:do_delete).and_yield }
-
-      it { expect(video.delete).to be true }
-      it { expect{video.delete}.to change{video.exists?} }
-    end
-  end
-end
\ No newline at end of file
+	describe '#delete' do	
+		let(:attrs) { {id: 'video-id'} }
+		context '!vid_exists!' do
+			before { expect(video).to receive(:do_delete).and_yield }
+			it { expect(video.delete).to be true }
+			it { expect{video.delete}.to change{video.exists?} }
+		end
+	end
+	
+	describe '#rated?' do
+		let(:attrs) { {id: 'video-id'} }
+		context 'rated?' do
+			it {
+				allow(video).to receive(:rating).and_return(rating)
+				allow(rating).to receive(:rating).and_return(:like)
+				expect(video.liked?).to be true
+			}
+		end
+	end
+	
+end
